---
name: pull-request
on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
    branches:
      - main

env:
  IMAGE_NAME: ${{ gitea.repository }}

jobs:
  run-unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Run pytests
        run: poetry run coverage run -m pytest -v -s

      - name: Run coverage report
        run: poetry run coverage report -m --omit="tests/*"

  run-build-tests:
    name: Run build tests
    runs-on: ubuntu-latest
    outputs:
      environment_name: ${{ steps.generate-env.outputs.environment_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate environment
        id: generate-env
        run: |
          branch_name=${{ gitea.ref }}
          echo "environment_name=$(echo $branch_name | tr '/' '-')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get build data
        id: get-build-date
        run: |
          build_date=$(date +"%Y%m%d%H%M%z")
          echo "build_date=$build_date" >> "$GITHUB_OUTPUT"

      - name: Get secrets from vault
        id: import-secrets
        uses: hashicorp/vault-action@v3
        with:
          url: "https://vault.ednz.fr"
          method: approle
          roleId: ${{ secrets.VAULT_APPROLE_ID }}
          secretId: ${{ secrets.VAULT_APPROLE_SECRET_ID }}
          secrets: |
            kv/data/cicd/gitea container_registry_uri | GITEA_REGISTRY_ADDRESS ;

      - name: Setup buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Prepare container metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.import-secrets.outputs.GITEA_REGISTRY_ADDRESS }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.authors=${{ gitea.repository_owner }}
            org.opencontainers.image.created=${{ steps.get-build-date.outputs.build_date }}
            org.opencontainers.image.url=${{ gitea.event.repository.html_url }}
            org.opencontainers.image.documentation=${{ gitea.event.repository.html_url }}
            org.opencontainers.image.source=${{ gitea.event.repository.html_url }}
            org.opencontainers.image.version=${{ steps.generate-env.outputs.environment_name }}
            org.opencontainers.image.test-build=true
          tags: |
            type=raw,value=${{ steps.generate-env.outputs.environment_name }}

      - name: Build container tarball
        id: build-and-push
        uses: docker/build-push-action@v6
        env:
          ACTIONS_RUNTIME_TOKEN: ""
        with:
          context: ${{ gitea.workspace }}
          file: ${{ gitea.workspace }}/Containerfile
          outputs: type=docker,dest=${{ gitea.workspace }}/dnswatch-oci.tar
          push: false
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: ${{ env.BUILD_PLATFORMS }}

      - name: Upload container tarball
        uses: christopherhx/gitea-upload-artifact@v4
        with:
          name: dnswatch-oci.tar
          path: ${{ gitea.workspace }}/dnswatch-oci.tar
          retention-days: 1

      - name: Install Trivy
        run: |
          export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          echo "Installing Trivy version $TRIVY_VERSION"
          wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -

          time ./trivy image --download-db-only
        env:
          IMAGE: ${{ gitea.workspace }}/dnswatch-oci.tar

      - name: "Run trivy scan for HIGH severity"
        run: |
          time ./trivy image --exit-code 0 --severity HIGH --input $IMAGE
        env:
          IMAGE: ${{ gitea.workspace }}/dnswatch-oci.tar

      - name: "Run trivy scan for CRITICAL severity"
        run: |
          time ./trivy image --exit-code 1 --severity CRITICAL --input $IMAGE
        env:
          IMAGE: ${{ gitea.workspace }}/dnswatch-oci.tar
